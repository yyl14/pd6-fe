
# Define variables for the job
variables:
  FF_USE_FASTZIP: "true" # enable fastzip - a faster zip implementation that also supports level configuration.
  ARTIFACT_COMPRESSION_LEVEL: default # can also be set to fastest, fast, slow and slowest. If just enabling fastzip is not enough try setting this to fastest or fast.
  CACHE_COMPRESSION_LEVEL: default # same as above, but for caches
  TRANSFER_METER_FREQUENCY: 5s # will display transfer progress every 5 seconds for artifacts and remote caches.
  # GIT_CLEAN_FLAGS: -ffdx -e node_modules/ .yarn .sonar/cache

workflow:
  rules:
    # Rules for all merge requests to development branch
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "development"'
      when: always
    # Rules for all pushes to development branch
    - if: '$CI_COMMIT_BRANCH == "development"'
      when: always

# Define the stages for the pipeline
stages:
  - Test
  - Build
  - Quality-Analysis

install:
  image: timbru31/node-alpine-git
  stage: .pre   # always first, no matter if it is listed in stages
  cache:
    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job
    - key: $CI_COMMIT_REF_NAME_MODULE
       # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
       paths:
         - .yarn/
       when: on_success
       policy: pull-push

    # Mimic &global_cache_node_mods config but override policy
    # to allow this job to update the cache at the end of the job
    # and only update if it was a successful job
    # NOTE: I would use yaml anchors here but overriding the policy
    # in a yaml list is not as easy as a dictionary entry (#5)
    - key:
       files:
         - package-lock.json
       paths:
         - node_modules/
       when: on_success
       policy: pull-push

Lint-test:
  stage: Test
  image: timbru31/node-alpine-git
  cache:
    key: $CI_COMMIT_REF_NAME_LINT
      files:
              - package-lock.json
    paths:
      - .eslint
    key: $CI_COMMIT_REF_NAME_MODULE
    paths:
      - node_modules/
      - .yarn
    policy: pull
  before_script:
    - sed -i 's/workspaces/workspaces-disabled/g' package.json
    - yarn install --frozen-lockfile --cache-folder .yarn --prefer-offline
    - sed -i 's/workspaces-disabled/workspaces/g' package.json
  script:
    - yarn lint
  allow_failure: false
  tags:
    - test

Unit-test:
  stage: Test
  image: timbru31/node-alpine-git
  cache:
    key: $CI_COMMIT_REF_NAME_MODULE
      files:
              - package-lock.json
    paths:
      - node_modules/
      - .yarn
    policy: pull
  before_script:
    - yarn install --frozen-lockfile --cache-folder .yarn --prefer-offline
  script:
    - yarn test --passWithNoTests
  allow_failure: false
  tags: 
    - test
  needs:
    - Lint-test

Build:
  image: timbru31/node-alpine-git
  cache:
    key: $CI_COMMIT_REF_NAME_MODULE
      files:
              - package-lock.json
    paths:
      - node_modules/
      - .yarn
    policy: pull
  artifacts:
    paths:
      - ./build
  before_script:
    - export NODE_OPTIONS=--openssl-legacy-provider
    - yarn install --frozen-lockfile --cache-folder .yarn --prefer-offline
  script:
    - yarn build
  stage: Build
  tags:
    - build
  needs:
    - Unit-test

Sonarqube:
  stage: Quality-Analysis
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: $CI_COMMIT_REF_NAME_Sonarqube
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.login=$SONAR_TOKEN
    # quality gate is an indicator of code quality that can be configured to give a go/no-go signal of the code
    # In order for the quality gate to fail on the GitLab side when it fails on the SonarQube side, the scanner needs to wait for the SonarQube quality gate status
  allow_failure: true
  tags:
    - test
  needs:
    - Unit-test

Lighthouse:
  allow_failure: true
  image: cypress/browsers:node-18.16.0-chrome-114.0.5735.133-1-ff-114.0.2-edge-114.0.1823.51-1
  cache:
    key: $CI_COMMIT_REF_NAME_MODULE
      files:
              - package-lock.json
    paths:
      - node_modules/
      - .yarn
    policy: pull
  before_script:
    - yarn install --frozen-lockfile --cache-folder .yarn --prefer-offline
  script:
    - yarn run lhci autorun #if frontend not provide the yarn lighthouse to run
  after_script:
    - yarn run lhci upload --target=lhci 
                           --serverBaseUrl=$LHCI_SERVER_BASE_URL 
                           --token=$LHCI_TOKEN 
                           --basicAuth.username=$LHCI_AUTH_USERNAME 
                           --basicAuth.password=$LHCI_AUTH_PASSWORD
                           
  stage: Quality-Analysis
  tags:
    - test
  needs:
    # install job is not "needed" unless it creates artifacts
    # install job also occurs in the previous stage `.pre` so it
    # is implicitly required since `when: on_success` is the default
    # for subsequent jobs in subsequent stages
    - job: build
      artifacts: true  